kind: DaemonSet

replicaCount: 1

image:
  repository: cr.fluentbit.io/fluent/fluent-bit
  tag: "3.0.1"
  pullPolicy: Always

testFramework:
  enabled: true
  image:
    repository: busybox
    pullPolicy: Always
    tag: latest
hostNetwork: false
dnsPolicy: ClusterFirst
service:
  type: ClusterIP
  port: 2020
  loadBalancerClass:
  loadBalancerSourceRanges: []
  labels: {}
serviceMonitor:
  enabled: false

prometheusRule:
  enabled: false

dashboards:
  enabled: false
  labelKey: grafana_dashboard
  annotations: {}
  namespace: ""

lifecycle: {}

livenessProbe:
  httpGet:
    path: /
    port: http

readinessProbe:
  httpGet:
    path: /api/v1/health
    port: http

resources: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  extraHosts: []
  tls: []

autoscaling:
  vpa:
    enabled: false
    annotations: {}
    controlledResources: []
    maxAllowed: {}
    minAllowed: {}

    updatePolicy:
      updateMode: Auto

  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 75
  customRules: []
  behavior: {}
podDisruptionBudget:
  enabled: false
  annotations: {}
  maxUnavailable: "30%"

nodeSelector: {}

tolerations:
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

affinity: {}

labels: {}

annotations: {}

podAnnotations: {}

podLabels: {}

minReadySeconds:

terminationGracePeriodSeconds:

priorityClassName: ""

env: []
envWithTpl: []

envFrom: []

extraContainers: []

flush: 1

metricsPort: 2020

extraPorts: []

extraVolumes: []

extraVolumeMounts: []

updateStrategy: {}
existingConfigMap: ""

networkPolicy:
  enabled: false

luaScripts: {}

config:
  inputs: |
    [INPUT]
        Name tail
        Path /var/log/containers/*.log
        multiline.parser docker, cri
        Tag kube.*
        Mem_Buf_Limit 5MB
        Skip_Long_Lines On

  outputs: |
    [OUTPUT]
        Name        stackdriver
        Match       kube.*
        Resource    k8s_container
        k8s_cluster_name NAMEOFTHECLUSTER
        k8s_cluster_location  LOCATIONOFTHECLUSTER
        tag_prefix  on_prem_k8s.
        google_service_credentials /var/run/google-service-credentials/key.json
        Retry_Limit 5
        workers 1

    [OUTPUT]
        Name        stackdriver
        Match       host.*
        Resource    k8s_node
        k8s_cluster_name NAMEOFTHECLUSTER
        k8s_cluster_location  LOCATIONOFTHECLUSTER
        tag_prefix  on_prem_k8s.
        google_service_credentials /var/run/google-service-credentials/key.json
        Retry_Limit 5
        workers 1

  extraFiles: {}

volumeMounts:
  - name: config
    mountPath: /fluent-bit/etc/fluent-bit.conf
    subPath: fluent-bit.conf
  - name: config
    mountPath: /fluent-bit/etc/custom_parsers.conf
    subPath: custom_parsers.conf

daemonSetVolumes:
  - name: varlog
    hostPath:
      path: /var/log
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  - name: etcmachineid
    hostPath:
      path: /etc/machine-id
      type: File
  - name: google-service-credentials
    secret:
      secretName: google-service-credentials
      optional: false

daemonSetVolumeMounts:
  - name: varlog
    mountPath: /var/log
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  - name: etcmachineid
    mountPath: /etc/machine-id
    readOnly: true
  - name: google-service-credentials
    mountPath: "/var/run/google-service-credentials"
    readOnly: true
args: []

command: []

initContainers: []

logLevel: info
